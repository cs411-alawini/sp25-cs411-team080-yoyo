<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>用户分析工具</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .analysis-container {
      max-width: 800px;
      margin: 40px auto;
      padding: 30px;
      background-color: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }
    .form-header {
      text-align: center;
      margin-bottom: 30px;
      color: #2c3e50;
    }
    .form-group {
      margin-bottom: 25px;
    }
    .form-label {
      font-weight: 600;
      color: #495057;
      margin-bottom: 8px;
    }
    .form-control {
      border-radius: 8px;
      padding: 12px;
      border: 1px solid #ced4da;
    }
    .btn-generate {
      width: 100%;
      padding: 12px;
      background-color: #4e73df;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      letter-spacing: 0.5px;
      transition: all 0.3s;
    }
    .btn-generate:hover {
      background-color: #3a5ccc;
      transform: translateY(-2px);
    }
    .chart-container {
      margin-top: 40px;
      height: 400px;
      background-color: #f8fafc;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px dashed #dee2e6;
    }
    .chart-placeholder {
      color: #adb5bd;
      font-size: 18px;
    }
    .age-range-container {
      display: flex;
      gap: 15px;
    }
    .age-input {
      flex: 1;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="analysis-container">
      <h2 class="form-header">User Purchase Preference Analysis</h2>
      
      <form id="analysisForm">
        <div class="form-group">
          <label for="location" class="form-label">Location</label>
          <input type="text" class="form-control" id="location" placeholder="Please enter the Location">
        </div>
        
        <div class="form-group">
          <label class="form-label">Age Range</label>
          <div class="age-range-container">
            <div class="age-input">
              <input type="number" class="form-control" id="minAge" placeholder="Minimum Age" min="18" max="100">
            </div>
            <div class="age-input">
              <input type="number" class="form-control" id="maxAge" placeholder="Maxmum Age" min="18" max="100">
            </div>
          </div>
        </div>
        
        <button type="submit" class="btn btn-primary btn-generate">
          Generate analysis report
        </button>
      </form>
      
      <div class="chart-container">
        <div class="chart-placeholder">The analysis results will be presented here in the form of a pie chart</div>
        <!-- 后续开发者可以在此处渲染图表 -->
        <canvas id="analysisChart" style="display: none;"></canvas>
      </div>
    </div>
  </div>

  
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
   document.getElementById('analysisForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  // 显示加载状态
  const submitBtn = e.target.querySelector('button[type="submit"]');
  const originalBtnText = submitBtn.textContent;
  submitBtn.disabled = true;
  submitBtn.textContent = 'Analyzing';

  try {
    // 重置图表区域
    document.querySelector('.chart-placeholder').style.display = 'block';
    const chartCanvas = document.getElementById('analysisChart');
    chartCanvas.style.display = 'none';
    
    // 安全销毁旧图表
    if (window.analysisChart instanceof Chart) {
      window.analysisChart.destroy();
    }
    window.analysisChart = null;

    // 获取表单数据
    const location = document.getElementById('location').value;
    const minAge = document.getElementById('minAge').value;
    const maxAge = document.getElementById('maxAge').value;

    // 验证输入
    if (!location || !minAge || !maxAge) {
      throw new Error('Please fill in all fields');
    }
    if (parseInt(minAge) > parseInt(maxAge)) {
      throw new Error('The maximum age must be greater than the minimum age');
    }

    // 发送请求
    const response = await fetch('/preference', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        source: 'preference',
        minAge: minAge,
        maxAge: maxAge,
        location: location
      })
    });

    const result = await response.json();

    if (!result.success) {
      throw new Error(result.message || 'The server returned an error');
    }

    // 准备图表数据
    const carModels = result.data.map(item => item.car_model);
    const purchaseCounts = result.data.map(item => parseInt(item.purchase_count));
    const totalPurchases = purchaseCounts.reduce((sum, count) => sum + count, 0);
    const percentages = purchaseCounts.map(count => 
      ((count / totalPurchases) * 100).toFixed(1) + '%'
    );

    // 显示图表
    document.querySelector('.chart-placeholder').style.display = 'none';
    chartCanvas.style.display = 'block';
    
    // 创建新图表
    window.analysisChart = new Chart(chartCanvas.getContext('2d'), {
      type: 'pie',
      data: {
        labels: carModels.map((model, index) => `${model} (${percentages[index]})`),
        datasets: [{
          data: purchaseCounts,
          backgroundColor: [
            '#FF6384', '#36A2EB', '#FFCE56', 
            '#4BC0C0', '#9966FF', '#FF9F40'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: 'right' },
          tooltip: {
            callbacks: {
              label: function(context) {
                return `${context.label}: ${context.raw}purchases`;
              }
            }
          }
        }
      }
    });

  } catch (error) {
    console.error('Error:', error);
    showNotification('Analysis failed: ' + error.message, 'error');
  } finally {
    // 恢复按钮状态
    submitBtn.disabled = false;
    submitBtn.textContent = originalBtnText;
  }
});

// 显示通知的辅助函数
function showNotification(message, type = 'success') {
  const notification = document.createElement('div');
  notification.textContent = message;
  notification.style.position = 'fixed';
  notification.style.top = '20px';
  notification.style.left = '50%';
  notification.style.transform = 'translateX(-50%)';
  notification.style.padding = '10px 20px';
  notification.style.backgroundColor = type === 'success' ? '#4CAF50' : '#f44336';
  notification.style.color = 'white';
  notification.style.borderRadius = '5px';
  notification.style.zIndex = '1000';
  document.body.appendChild(notification);

  setTimeout(() => {
    document.body.removeChild(notification);
  }, 3000);
}

    

  
  </script>
</body>
</html>